import { test, expect } from '@playwright/test';
import MarketplacesPage from '../../pages/console/marketplacesPage';
import AccountsPage from '../../pages/console/accountsPage';
import CommonHelperPages from '../../pages/console/commonHelperPages';
import StripeOnboardingPage from '../../pages/stripe/stripeOnboardingPage';
import { faker } from '@faker-js/faker';
import WelcomeSellerPage from '../../pages/console/welcomeSellerPage';
import * as welcomePageData from '../../fixtures/onboarding_pages/welcomePageData.json';
import * as pageName from '../../fixtures/page_names/consolePageNames.json';
import * as sellerData from '../../fixtures/data/automation-seller-data.json';
import * as adminData from '../../fixtures/data/automation-seller-data.json';
import * as stripeOnboardingData from '../../fixtures/stripe_onboarding_data/stripeOnboardingData.json';
import * as emailData from '../../fixtures/email_notifications/emailData.json';
import ConsoleSidebarNavigation from '../../pages/console/sidebarNavigation';
import AccountSettingsPage from '../../pages/console/settingsPage';
import { emailLinkFollower } from '../../pages/email_parser_helpers/extract_data_from_email.helper';
import { emailSubjectChecker } from '../../pages/email_parser_helpers/extract_data_from_email.helper';
import CommissionsPayoutsPage from '../../pages/console/commissionsPayoutPage';

const { consoleURL } = process.env;
const firstName = faker.name.firstName();
const lastName = faker.name.lastName();
const phoneBusinessNumber = faker.phone.number('98974521##');
const dateBirthDate = faker.date.birthdate({ min: 18, max: 120, mode: 'age' });
const birthDay = (dateBirthDate.getDate()).toString();
const birthMonth = (dateBirthDate.getMonth() + 1).toString();
const birthYear = (dateBirthDate.getFullYear()).toString();
const jobTitle = faker.name.jobType();
const nameSeller = `${faker.name.firstName()} ${faker.name.lastName()}`;

test.use({ storageState: './state-storage-files/mpoStorageStage.json' });
test('Connect company stripe account to the newly created seller', async ({ page, isMobile }) => {
    const commonHelperPages = new CommonHelperPages(page);
    const stripeOnboardingPage = new StripeOnboardingPage(page);
    const welcomeSellerPage = new WelcomeSellerPage(page);
    const accountsPage = new AccountsPage(page, isMobile);
    const marketplacesPage = new MarketplacesPage(page);
    const sideBarNavigation = new ConsoleSidebarNavigation(page, isMobile);
    const settingsPage = new AccountSettingsPage(page, isMobile);
    const commissionsPayoutsPage = new CommissionsPayoutsPage(page);
    const userEmail = `${faker.name.firstName()}_${faker.name.lastName()}+${faker.random.alphaNumeric(9)}@2ixhgmcj.mailosaur.net`;

    await page.goto(`${consoleURL}`, { waitUntil: "load" });
    await sideBarNavigation.goToAccounts();
    await accountsPage.openAddAccountModal();
    await accountsPage.openFormForCreateSeller();
    await accountsPage.fillSellerForm(nameSeller, userEmail);
    await accountsPage.clickSubmitButton();
    await accountsPage.clickStorefrontTabOnSellerPage();
    await accountsPage.clickSendInviteButton();
    await emailLinkFollower.followLinkAndExtractData(userEmail, emailData.subjectInvitationEmail, emailData.invitationEmailButtonName, page)
    await expect(page).toHaveURL(`${consoleURL}/create-storefront`);
    await expect(await commonHelperPages.findElementByText(welcomePageData.modalName)).toBeVisible();
    await welcomeSellerPage.enterStorefrontName(nameSeller);
    await welcomeSellerPage.openWelcomePage();
    await expect(await commonHelperPages.findElementByText(welcomePageData.welcomeText)).toBeVisible();
    await welcomeSellerPage.openHomePage();
    await expect(await commonHelperPages.checkPageName(pageName.homePage)).toBeVisible();
    await sideBarNavigation.goToSettings();
    await expect(settingsPage.adminName).toHaveValue(nameSeller);
    await expect(settingsPage.adminEmail).toHaveValue(userEmail);
    await settingsPage.enterAddress(sellerData.addressLine);
    await settingsPage.clickSettingSaveButton();
    await commonHelperPages.closeNotificationToast();
    await settingsPage.openPayoutMethodsPage();
    await expect(await commonHelperPages.findElementByText(pageName.payoutsMethodsPage)).toBeVisible();
    await commissionsPayoutsPage.openStripeConnectingModal();
    await expect(commissionsPayoutsPage.stripeConnectingModal).toBeVisible();
    await commissionsPayoutsPage.clickOnBusinessTypeButton(stripeOnboardingData.companyBusinessType);
    await commissionsPayoutsPage.clickConnectButtonOnTheStripeModal();
    await stripeOnboardingPage.clickTestPhoneNumberLink();
    await stripeOnboardingPage.clickContinueSubmitButton();
    await stripeOnboardingPage.clickUseTestCodeButton();
    await stripeOnboardingPage.enterEmployerIdentificationNumber(stripeOnboardingData.employerIdentificationNumber);
    await stripeOnboardingPage.clickOnContinueButton();
    await stripeOnboardingPage.fillYourLegalNamePersonalDetailsField(firstName);
    await stripeOnboardingPage.fillYourLegalLastNamePersonalDetailsField(lastName);
    await stripeOnboardingPage.enterJobTitle(jobTitle);
    await stripeOnboardingPage.fillDateBirthPersonalDetailsField(birthMonth, birthDay, birthYear);
    await stripeOnboardingPage.fillAddressPersonalDetailsField(stripeOnboardingData.addressPersonalDetailsShort, stripeOnboardingData.addressPersonalDetailsFull);
    await stripeOnboardingPage.enterPhoneBusinessNumber(phoneBusinessNumber);
    await stripeOnboardingPage.fillTestSocialSecurityNumberField(stripeOnboardingData.socialSecurityNumber);
    await stripeOnboardingPage.clickContinueButton();
    await stripeOnboardingPage.clickContinueWithNoOwnersButton();
    await stripeOnboardingPage.openManuallyEnteringBankDetailsPopup();
    await expect(stripeOnboardingPage.useTestAccountButton).toBeVisible();
    await stripeOnboardingPage.clickUseTestAccountButton();
    await stripeOnboardingPage.clickContinueButton();
    await stripeOnboardingPage.clickAgreeSubmitButton();
    await expect(page.getByText(userEmail)).toBeVisible();
    await expect(await commonHelperPages.findElementByText(pageName.payoutsMethodsPage)).toBeVisible();
    await expect(await emailSubjectChecker.checkEmailSubject(userEmail, emailData.subjectWelcomeEmail)).toEqual(emailData.subjectWelcomeEmail);
});

test.use({ storageState: './state-storage-files/mpoStorageStage.json' });
test('Connect individual stripe account to the newly created seller', async ({ page, isMobile }) => {
    const commonHelperPages = new CommonHelperPages(page);
    const stripeOnboardingPage = new StripeOnboardingPage(page);
    const welcomeSellerPage = new WelcomeSellerPage(page)
    const sideBarNavigation = new ConsoleSidebarNavigation(page, isMobile);
    const settingsPage = new AccountSettingsPage(page, isMobile);
    const accountsPage = new AccountsPage(page, isMobile);
    const marketplacesPage = new MarketplacesPage(page);
    const commissionsPayoutsPage = new CommissionsPayoutsPage(page);
    const userEmail = `${faker.name.firstName()}_${faker.name.lastName()}+${faker.random.alphaNumeric(9)}@2ixhgmcj.mailosaur.net`;
    
    await page.goto(`${consoleURL}`, { waitUntil: "load" });
    await sideBarNavigation.goToAccounts();
    await accountsPage.openAddAccountModal();
    await accountsPage.openFormForCreateSeller();
    await accountsPage.fillSellerForm(nameSeller, userEmail);
    await accountsPage.clickSubmitButton();
    await accountsPage.clickStorefrontTabOnSellerPage();
    await accountsPage.clickSendInviteButton();
    await emailLinkFollower.followLinkAndExtractData(userEmail, emailData.subjectInvitationEmail, emailData.invitationEmailButtonName, page)
    await expect(page).toHaveURL(`${consoleURL}/create-storefront`);
    await expect(await commonHelperPages.findElementByText(welcomePageData.modalName)).toBeVisible();
    await welcomeSellerPage.enterStorefrontName(nameSeller);
    await welcomeSellerPage.openWelcomePage();
    await expect(await commonHelperPages.findElementByText(welcomePageData.welcomeText)).toBeVisible();
    await welcomeSellerPage.openHomePage();
    await expect(await commonHelperPages.checkPageName(pageName.homePage)).toBeVisible();
    await sideBarNavigation.goToSettings();
    await expect(settingsPage.adminName).toHaveValue(nameSeller);
    await expect(settingsPage.adminEmail).toHaveValue(userEmail);
    await settingsPage.enterAddress(sellerData.addressLine);
    await settingsPage.clickSettingSaveButton();
    await commonHelperPages.closeNotificationToast();
    await settingsPage.openPayoutMethodsPage();
    await expect(await commonHelperPages.findElementByText(pageName.payoutsMethodsPage)).toBeVisible();
    await commissionsPayoutsPage.openStripeConnectingModal();
    await expect(commissionsPayoutsPage.stripeConnectingModal).toBeVisible();
    await commissionsPayoutsPage.clickOnBusinessTypeButton(stripeOnboardingData.individualBusinessType);
    await commissionsPayoutsPage.clickConnectButtonOnTheStripeModal();
    await stripeOnboardingPage.clickTestPhoneNumberLink();
    await stripeOnboardingPage.clickContinueSubmitButton();
    await stripeOnboardingPage.clickUseTestCodeButton();
    await stripeOnboardingPage.fillYourLegalNamePersonalDetailsField(firstName);
    await stripeOnboardingPage.fillYourLegalLastNamePersonalDetailsField(lastName);
    await stripeOnboardingPage.fillDateBirthPersonalDetailsField(birthMonth, birthDay, birthYear);
    await stripeOnboardingPage.enterPhoneBusinessNumber(phoneBusinessNumber);
    await stripeOnboardingPage.fillTestSocialSecurityNumberField(stripeOnboardingData.socialSecurityNumber);
    await stripeOnboardingPage.clickContinueButton();
    await stripeOnboardingPage.openManuallyEnteringBankDetailsPopup();
    await expect(stripeOnboardingPage.useTestAccountButton).toBeVisible();
    await stripeOnboardingPage.clickUseTestAccountButton();
    await stripeOnboardingPage.clickContinueButton();
    await stripeOnboardingPage.clickAgreeSubmitButton();
    await expect(page.getByText(userEmail)).toBeVisible();
    await expect(await commonHelperPages.findElementByText(pageName.payoutsMethodsPage)).toBeVisible();
    await expect(await emailSubjectChecker.checkEmailSubject(userEmail, emailData.subjectWelcomeEmail)).toEqual(emailData.subjectWelcomeEmail);
});