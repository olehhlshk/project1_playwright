import { test, expect } from '@playwright/test';
import LandingPage from '../../pages/storefront/landingPage';
import StripeCheckoutPage from '../../pages/stripe/stripeCheckoutPage';
import CheckoutPage from '../../pages/storefront/checkoutPage';
import ProductDetailsPage from '../../pages/storefront/productDetailsPage';
import CategoriesPage from '../../pages/storefront/categoriesPage';
import CartPage from '../../pages/storefront/cartPage';
import SuccessfulPage from '../../pages/storefront/successfulPage';
import AllProductsPage from '../../pages/storefront/allProductsPage';
import ZipModalPage from '../../pages/storefront/zipModalPage';
import * as buyerData from '../../fixtures/data/buyer-data.json';
import * as storefrontData from '../../fixtures/data/storefront-data.json';

test('complete order with multiple products and quantities', async ({ page, isMobile }) => {
  const { storefrontURL } = process.env;
  const landingPage = new LandingPage(page, isMobile);
  const stripe = new StripeCheckoutPage(page);
  const checkoutPage = new CheckoutPage(page);
  const allProductsPage = new AllProductsPage(page);
  const productDetailsPage = new ProductDetailsPage(page);
  const categoriesPage = new CategoriesPage(page);
  const cartPage = new CartPage(page);
  const successfulPage = new SuccessfulPage(page);
  const zipModal = new ZipModalPage(page);
  
  await page.goto(`${storefrontURL}`, { waitUntil: "load" });
  await landingPage.acceptAllCookies();
  await zipModal.updateZip(buyerData.zip);
  await landingPage.searchProduct(storefrontData.product4);
  await productDetailsPage.openProductDetails(storefrontData.product4);
  await productDetailsPage.AddToCard();
  await page.goto(`${storefrontURL}`);
  await expect(allProductsPage.outOfStockLabel).toBeVisible();
  await expect(allProductsPage.lowInStockLabel).toBeVisible();
  await allProductsPage.addProductQtyByName(storefrontData.product1, 4);
  await landingPage.carousel();
  await landingPage.carousel();
  await allProductsPage.addProductQtyByName(storefrontData.product3, 2);
  await landingPage.openBrandDetails();
  await expect(page).toHaveURL(`${storefrontURL}/brands/holika-holika`);
  await expect(allProductsPage.outOfStockLabel).toBeVisible();
  await expect(allProductsPage.lowInStockLabel).toBeVisible();
  await productDetailsPage.openProductDetails(storefrontData.product2);
  await expect(page).toHaveURL(`${storefrontURL}/products/180-comb-cutting`);
  await expect(productDetailsPage.regularPrice).toBeVisible();
  await expect(productDetailsPage.discountedPrice).toBeVisible();
  await productDetailsPage.AddToCard();
  await landingPage.openCategories();
  await expect(page).toHaveURL(`${storefrontURL}/categories`);
  await categoriesPage.openCategoryDetailsByName(storefrontData.category);
  await expect(page).toHaveURL(`${storefrontURL}/categories/bath-body`);
  await expect(allProductsPage.outOfStockLabel).toBeVisible();
  await landingPage.openCart();
  await expect(page).toHaveURL(`${storefrontURL}/cart`);
  // await cartPage.removeItem();
  await cartPage.proceedToCheckout();
  await expect(page).toHaveURL(`${storefrontURL}/cart/checkout`);
  await checkoutPage.enterFullName(buyerData.name);
  await checkoutPage.enterEmail(buyerData.email);
  await checkoutPage.enterPhone(buyerData.shortPhone);
  await checkoutPage.enterAddress(buyerData.addressLine);
  await checkoutPage.privacyPolicy.check();
  await checkoutPage.proceedToPayment.isEnabled();
  await checkoutPage.proceedToPayment.click();
  await stripe.makeStripePayment();
  await expect(page).toHaveURL(`${storefrontURL}/order-successful`);
  await successfulPage.goHome();
  await expect(page).toHaveURL(`${storefrontURL}`);
});