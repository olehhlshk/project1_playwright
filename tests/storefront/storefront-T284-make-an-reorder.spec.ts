import { test, expect } from '@playwright/test';
import AccountDetailsPage from '../../pages/storefront/accountDetailsPage';
import CartPage from '../../pages/storefront/cartPage';
import CheckoutPage from '../../pages/storefront/checkoutPage';
import LandingPage from '../../pages/storefront/landingPage';
import OrderHistoryPage from '../../pages/storefront/orderHistoryPage';
import SuccessfulPage from '../../pages/storefront/successfulPage';
import StripeCheckoutPage from '../../pages/stripe/stripeCheckoutPage';
import ProductDetailsPage from '../../pages/storefront/productDetailsPage';
import * as buyerData from '../../fixtures/data/buyer-data.json';
import * as storefrontData from '../../fixtures/data/storefront-data.json';

test.use({ storageState: './state-storage-files/registredBuyerStorageState.json' });
test('make an reorder', async ({ page, isMobile }) => {
  const { storefrontURL } = process.env;
  const accountDetailsPage = new AccountDetailsPage (page);
  const cartPage = new CartPage(page);
  const checkoutPage = new CheckoutPage(page);
  const stripe = new StripeCheckoutPage(page);
  const orderHistoryPage = new OrderHistoryPage(page);
  const successfulPage = new SuccessfulPage(page);
  const landingPage = new LandingPage(page, isMobile);
  const productDetailsPage = new ProductDetailsPage(page);

  await page.goto(`${storefrontURL}`, { waitUntil: "load" });
  await landingPage.acceptAllCookies();
  await landingPage.searchProduct(storefrontData.product1);
  await productDetailsPage.openProductDetails(storefrontData.product1);
  await productDetailsPage.AddToCard();
  await landingPage.searchProduct(storefrontData.product3);
  await productDetailsPage.openProductDetails(storefrontData.product3);
  await productDetailsPage.AddToCard();
  await landingPage.searchProduct(storefrontData.product2);
  await productDetailsPage.openProductDetails(storefrontData.product2);
  await productDetailsPage.AddToCard();
  await landingPage.openCart();
  await cartPage.proceedToCheckout();
  await checkoutPage.privacyPolicy.check();
  await checkoutPage.proceedToPayment.click();
  const orderUid = await checkoutPage.proceedToPaymentGetOrderUid();
  await stripe.makeStripePayment();
  await expect(page).toHaveURL(`${storefrontURL}/order-successful`);
  await landingPage.openAccountDetails();
  await expect(page).toHaveURL(`${storefrontURL}/account-details`);
  expect(await accountDetailsPage.getFullName()).toBe(buyerData.name);
  expect(await accountDetailsPage.getEmail()).toBe(buyerData.email);
  expect(await accountDetailsPage.getPhoneNumber()).toBe(buyerData.phone);
  expect(await accountDetailsPage.getAddressLine1()).toBe(buyerData.addressLine);
  expect(await accountDetailsPage.getCity()).toBe(buyerData.city);
  expect(await accountDetailsPage.getZip()).toBe(buyerData.zip);
  expect(await accountDetailsPage.getState()).toBe(buyerData.state);
  expect(await accountDetailsPage.getCountry()).toBe(buyerData.country);
  await accountDetailsPage.openOrderHistory();
  await expect(page).toHaveURL(`${storefrontURL}/account-details/order-history`);
  await orderHistoryPage.openOrderDetailsByOrderUid(`${storefrontURL}`, await orderUid);
  await expect(await orderHistoryPage.getProductName(storefrontData.product1)).toBeVisible();
  await expect(await orderHistoryPage.getProductName(storefrontData.product3)).toBeVisible();
  await expect(await orderHistoryPage.getProductName(storefrontData.product2)).toBeVisible();
  await expect(orderHistoryPage.subTotalPrice).toBeVisible();
  await orderHistoryPage.makeReorder();
  await expect(page).toHaveURL(`${storefrontURL}/cart`);
  await expect(await orderHistoryPage.getProductName(storefrontData.product1)).toBeVisible();
  await expect(await orderHistoryPage.getProductName(storefrontData.product3)).toBeVisible();
  await expect(await orderHistoryPage.getProductName(storefrontData.product2)).toBeVisible();
  await expect(orderHistoryPage.subTotalPrice).toBeVisible();
  await cartPage.proceedToCheckout();
  await expect(page).toHaveURL(`${storefrontURL}/cart/checkout`);
  await checkoutPage.privacyPolicy.check();
  await checkoutPage.proceedToPayment.click();
  const reOrderUid = await checkoutPage.proceedToPaymentGetOrderUid();
  await stripe.makeStripePayment();
  await expect(page).toHaveURL(`${storefrontURL}/order-successful`);
  await successfulPage.goHome();
  await expect(page).toHaveURL(`${storefrontURL}`);
  await landingPage.openAccountDetails();
  await expect(page).toHaveURL(`${storefrontURL}/account-details`);
  await accountDetailsPage.openOrderHistory();
  await expect(page).toHaveURL(`${storefrontURL}/account-details/order-history`);
  await orderHistoryPage.openOrderDetailsByOrderUid(`${storefrontURL}`, await reOrderUid);
  await expect(await orderHistoryPage.getProductName(storefrontData.product1)).toBeVisible();
  await expect(await orderHistoryPage.getProductName(storefrontData.product3)).toBeVisible();
  await expect(await orderHistoryPage.getProductName(storefrontData.product2)).toBeVisible();
});